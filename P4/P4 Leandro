#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <sys/time.h>
#include <math.h>
#include <string.h>
#include <stdbool.h>




typedef int ** matriz;
void dijkstra(matriz grafo, matriz distancias, int tam) {
    int n, i, j, min, v=0;
    int *noVisitados = malloc(tam*sizeof(int));
    for (n=0; n<tam; n++) {
        for (i=0; i<tam; i++) {
            noVisitados[i] = 1;
            distancias[n][i] = grafo[n][i];
        }
        noVisitados[n] = 0;
        for (i = 0; i < n-2; i++){
           v = -1;
           for(j = 0; j < n; j++){
               if(distancias[n][j] > distancias [n][v] + grafo[v][j]){
                   distancias[n][j] = distancias[n][v] + grafo [v][j];
               }
           }
        }
    }
    free(noVisitados);
}


#define TAM_MAX 1000
matriz crearMatriz(int n) {
    int i;
    matriz aux;
    if ((aux = malloc(n*sizeof(int *))) == NULL)
        return NULL;
    for (i=0; i<n; i++)
        if ((aux[i] = malloc(n*sizeof(int))) == NULL)
            return NULL;
    return aux;
}
/* Inicializacion pseudoaleatoria [1..TAM_MAX] de un grafo completo
no dirigido con n nodos, representado por su matriz de adayencia */
void iniMatriz(matriz m, int n) {
    int i, j;
    for (i=0; i<n; i++)
        for (j=i+1; j<n; j++)
            m[i][j] = rand() % TAM_MAX + 1;
    for (i=0; i<n; i++)
        for (j=0; j<=i; j++)
            if (i==j)
                m[i][j] = 0;
            else
                m[i][j] = m[j][i];
}
void liberarMatriz(matriz m, int n) {
    int i;
    for (i=0; i<n; i++)
        free(m[i]);
    free(m);
}


}
int main() {
    printf("Hello, World!\n");
    return 0;
}
