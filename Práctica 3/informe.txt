PRÁCTICA 2: "ORDENACIÓN POR INSERCIÓN Y ORDENACIÓN POR SHELL"
AUTOR: Iván Castro Roel                 LOGIN: ivan.castro.roel
AUTOR: Alejandro Amado Fernández        LOGIN: alejandro.amado
AUTOR: Leandro Malo Balboa              LOGIN: leandro.mbalboa
GRUPO: 4.3
FECHA: 20/10/2023	

Práctica realizada en:
-Ordenador portátil:
 SO: Ubuntu 22.04.3 LTS
 CPU: AMD Ryzen 7 6800H with Radeon Graphics            3.20 GHz
 RAM: 8GB
 GPU: NVIDIA GeForce RTX 3060
 

Esta practica tiene por objetivo determinar el tiempo de ejecución de 
un algoritmo: El algoritmo de ordenación por montículos. Este algoritmo se
encarga de ordenar ascendentemente un vector de n números enteros, que
previamente pueden estar ordenados aleatoriamente, descendentemente o 
ascendentemente. El analisis de los resultados se hizo a través de una 
comprobación empírica de la complejidad.

Todas las mediciones presentes en este informe han sido realizadas en 
microsegundos (µs).Para ello nos hemos apoyado en la función microsegundos().

Para un correcto estudio de los tiempos de dichos algoritmos hemos empleado 
arrays con datos de entrada que siguen una progresión geométrica de razón 2. 
Los tamaños de entrada empleados en el estudio son: 500, 1000, 2000, 4000, 
8000, 16000 y 32000 elementos respectivamente.

---------------------
Tablas de Resultados
---------------------


A continuación se mostrarán una serie de tablas con los resultados obtenidos
en nuestro estudio para la ejecución del algoritmo, en dichas tablas se
mostrará la siguiente información: El tamaño del array empleado (n), el tiempo 
medio de ejecución (t(n)), la cota subestimada, ajustada y sobreestimada. 

También es importante destacar que para el correcto estudio de dichas 
funciones se ha decidido que para aquellas mediciones de menos de 500 µs se 
ha decidido realizar 1000 iteraciones y calculado su promedio.

-------Ordenación por montículos-------

Tiempos de ejecución (monticulo, aleatorio)

         Tamaño           t(n)   (t(n)/n^0.9)   (t(n)/n^1.1)   (t(n)/n^1.3)
(*)         500         35.111       0.122851       0.035448       0.010228
(*)        1000         77.927       0.145107       0.036449       0.009156
(*)        2000        172.352       0.170797       0.037348       0.008167
(*)        4000        375.304       0.197929       0.037679       0.007173
           8000        805.000       0.225935       0.037443       0.006205
          16000       1688.000       0.252129       0.036375       0.005248
          32000       3833.000       0.304686       0.038267       0.004806

(*) -> Tiempo medio para 1000 iteraciones 


Cota subestimada: n^0.9
Cota ajustada: n^1.1
Cota sobrestimada: n^1.3


Los valores de dividir el tiempo entre la cota subestimada tienden 
a infinito a medida que aumenta n.

Los valores de dividir el tiempo entre la cota ajustada tienden a 
la constante '0.037'.

Los valores de dividir el tiempo entre la cota sobrestimada tienden a 0 
a medida que aumenta n.


Tiempos de ejecución (monticulo, descendente)

         Tamaño           t(n)  (t(n)/n^0.93)  (t(n)/n^1.13)  (t(n)/n^1.33)
(*)         500         19.224       0.059402       0.017140       0.004946
(*)        1000         54.646       0.088625       0.022262       0.005592
(*)        2000        135.363       0.115224       0.025196       0.005510
(*)        4000        296.025       0.132255       0.025177       0.004793
           8000        695.000       0.162971       0.027008       0.004476
          16000       1389.000       0.170951       0.024663       0.003558
          32000       2740.000       0.176995       0.022230       0.002792

(*) -> Tiempo medio para 1000 iteraciones 


Cota subestimada: n^0.95
Cota ajustada: n^1.15
Cota sobrestimada: n^1.35


Los valores de dividir el tiempo entre la cota subestimada tienden 
a infinito a medida que aumenta n.

Los valores de dividir el tiempo entre la cota ajustada tienden a 
la constante '0.025'.

Los valores de dividir el tiempo entre la cota sobrestimada tienden a 0 
a medida que aumenta n.



Tiempos de ejecución (monticulo, ascendente)

         Tamaño           t(n)  (t(n)/n^0.93)  (t(n)/n^1.13)  (t(n)/n^1.33)
(*)         500         16.928       0.052307       0.015093       0.004355
(*)        1000         50.784       0.082362       0.020688       0.005197
(*)        2000        118.582       0.100939       0.022073       0.004827
(*)        4000        295.076       0.131831       0.025096       0.004777
           8000        679.000       0.159219       0.026386       0.004373
          16000       1348.000       0.165905       0.023935       0.003453
          32000       2748.000       0.177512       0.022294       0.002800

(*) -> Tiempo medio para 1000 iteraciones 


Cota subestimada: n^0.95
Cota ajustada: n^1.15
Cota sobrestimada: n^1.35


Los valores de dividir el tiempo entre el la cota subestimada tienden 
a infinito a medida que aumenta n.

Los valores de dividir el tiempo entre el la cota ajustada tienden a 
la constante '0.025'.

Los valores de dividir el tiempo entre el la cota sobrestimada tienden a 0 
a medida que aumenta n.


--------------
Conclusiones
--------------
