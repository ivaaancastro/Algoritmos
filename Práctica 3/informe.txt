PRÁCTICA 3: "ORDENACIÓN POR MONTÍCULOS"
AUTOR: Iván Castro Roel                 LOGIN: ivan.castro.roel
AUTOR: Alejandro Amado Fernández        LOGIN: alejandro.amado
AUTOR: Leandro Malo Balboa              LOGIN: leandro.mbalboa
GRUPO: 4.3
FECHA: 02/11/2023	

Práctica realizada en:
-Ordenador portátil:
 SO: Ubuntu 22.04.3 LTS
 CPU: Intel core i7-9750h            2.60 GHz
 RAM: 32GB
 GPU: NVIDIA GeForce RTX 2060
 

Esta practica tiene por objetivo determinar el tiempo de ejecución de 
un algoritmo: El algoritmo de ordenación por montículos. Este algoritmo se
encarga de ordenar ascendentemente un vector de n números enteros, que
previamente pueden estar ordenados aleatoriamente, descendentemente o 
ascendentemente. El analisis de los resultados se hizo a través de una 
comprobación empírica de la complejidad.

Todas las mediciones presentes en este informe han sido realizadas en 
microsegundos (µs).Para ello nos hemos apoyado en la función microsegundos().

Para un correcto estudio de los tiempos de dichos algoritmos hemos empleado 
arrays con datos de entrada que siguen una progresión geométrica de razón 2. 
Los tamaños de entrada empleados en el estudio son: 2000, 4000, 8000, 16000, 
32000, 64000 y 128000 elementos respectivamente.

---------------------
Tablas de Resultados
---------------------


A continuación se mostrarán una serie de tablas con los resultados obtenidos
en nuestro estudio para la ejecución del algoritmo, en dichas tablas se
mostrará la siguiente información: El tamaño del array empleado (n), el tiempo 
medio de ejecución (t(n)), la cota subestimada, ajustada y sobreestimada. 

También es importante destacar que para el correcto estudio de dichas 
funciones se ha decidido que para aquellas mediciones de menos de 500 µs se 
ha decidido realizar 1000 iteraciones y calculado su promedio.

-------Ordenación por montículos-------

Tiempos de ejecución (monticulo, aleatorio)

         Tamaño           t(n)   (t(n)/n^0.9)   (t(n)/n^1.1)   (t(n)/n^1.3)
(*)        2000        205.668       0.219907       0.048088       0.010515
(*)        4000        439.670       0.251926       0.047958       0.009130
           8000        918.000       0.281878       0.046714       0.007742
          16000       2013.000       0.331235       0.047787       0.006894
          32000       4292.000       0.378464       0.047533       0.005970
          64000       9691.000       0.457938       0.050069       0.005474
         128000      20708.000       0.524384       0.049912       0.004751

(*) -> Tiempo medio para 1000 iteraciones 


Cota subestimada: n^0.9
Cota ajustada: n^1.1
Cota sobrestimada: n^1.3


Los valores de dividir el tiempo entre la cota subestimada tienden 
a infinito a medida que aumenta n.

Los valores de dividir el tiempo entre la cota ajustada tienden a 
la constante '0.049'.

Los valores de dividir el tiempo entre la cota sobrestimada tienden a 0 
a medida que aumenta n.


Tiempos de ejecución (monticulo, descendente)

         Tamaño           t(n)  (t(n)/n^0.88)  (t(n)/n^1.08)  (t(n)/n^1.28)
(*)        2000        165.831       0.206424       0.045139       0.009871
(*)        4000        352.348       0.238319       0.045368       0.008636
           8000        770.000       0.282990       0.046898       0.007772
          16000       1590.000       0.317520       0.045809       0.006609
          32000       3235.000       0.351028       0.044087       0.005537
          64000       6962.000       0.410483       0.044881       0.004907
         128000      14894.000       0.477163       0.045418       0.004323

(*) -> Tiempo medio para 1000 iteraciones 


Cota subestimada: n^0.88
Cota ajustada: n^1.08
Cota sobrestimada: n^1.28


Los valores de dividir el tiempo entre la cota subestimada tienden 
a infinito a medida que aumenta n.

Los valores de dividir el tiempo entre la cota ajustada tienden a 
la constante '0.045'.

Los valores de dividir el tiempo entre la cota sobrestimada tienden a 0 
a medida que aumenta n.



Tiempos de ejecución (monticulo, ascendente)

         Tamaño           t(n)  (t(n)/n^0.88)  (t(n)/n^1.08)  (t(n)/n^1.28)
(*)        2000        160.365       0.199620       0.043651       0.009545
(*)        4000        340.635       0.230397       0.043860       0.008349
           8000        755.000       0.277477       0.045984       0.007621
          16000       1539.000       0.307336       0.044339       0.006397
          32000       3217.000       0.349075       0.043842       0.005506
          64000       6837.000       0.403113       0.044075       0.004819
         128000      14412.000       0.461721       0.043948       0.004183

(*) -> Tiempo medio para 1000 iteraciones 


Cota subestimada: n^0.88
Cota ajustada: n^1.08
Cota sobrestimada: n^1.28


Los valores de dividir el tiempo entre el la cota subestimada tienden 
a infinito a medida que aumenta n.

Los valores de dividir el tiempo entre el la cota ajustada tienden a 
la constante '0.044'.

Los valores de dividir el tiempo entre el la cota sobrestimada tienden a 0 
a medida que aumenta n.


--------------
Conclusiones
--------------

En esta práctica, hemos estudiado el algoritmo de ordenación por montículos
y su rendimiento en diferentes escenarios. Hemos observado que el algoritmo
se comporta de manera eficiente en la mayoría de los casos, y su complejidad
computacional se ajusta a las cotas propuestas, siendo de O(n*log(n)). Sin
embargo, hemos notado que el rendimiento del algoritmo es especialmente 
destacable cuando se aplica a conjuntos de datos más grandes. A medida que 
aumenta el tamaño del vector de entrada, el tiempo de ejecución tiende a 
aumentar, pero sigue siendo razonablemente rápido.

En el caso de conjuntos de datos aleatorios, hemos observado que el tiempo de 
ejecución es mayor en comparación con los conjuntos ordenados ascendentemente
o descendentemente, aunque es una diferencia bastante pequeña, sobre todo en 
comparación con los otros algoritmos vistos. Esto sugiere que el algoritmo de 
ordenación por montículos puede beneficiarse de datos preordenados. En general, 
hemos visto que las cotas subestimadas, ajustadas y sobrestimadas proporcionan 
una buena estimación del comportamiento del algoritmo en diferentes 
situaciones.
