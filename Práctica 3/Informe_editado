PRÁCTICA 3: "ORDENACIÓN POR MONTÍCULOS"
AUTOR: Iván Castro Roel                 LOGIN: ivan.castro.roel
AUTOR: Alejandro Amado Fernández        LOGIN: alejandro.amado
AUTOR: Leandro Malo Balboa              LOGIN: leandro.mbalboa
GRUPO: 4.3
FECHA: 02/11/2023	

Práctica realizada en:
-Ordenador portátil:
 SO: Ubuntu 22.04.3 LTS
 CPU: Intel core i7-9750h            2.60 GHz
 RAM: 32GB
 GPU: NVIDIA GeForce RTX 2060
 

Esta practica tiene por objetivo determinar el tiempo de ejecución de 
un algoritmo: El algoritmo de ordenación por montículos. Este algoritmo se
encarga de ordenar ascendentemente un vector de n números enteros, que
previamente pueden estar ordenados aleatoriamente, descendentemente o 
ascendentemente. El analisis de los resultados se hizo a través de una 
comprobación empírica de la complejidad. Además, también será objeto de 
estudio la complejidad de la operación que se encarga de crear un montículo

Todas las mediciones presentes en este informe han sido realizadas en 
microsegundos (µs).Para ello nos hemos apoyado en la función microsegundos().

Para un correcto estudio de los tiempos de dichos algoritmos hemos empleado 
arrays con datos de entrada que siguen una progresión geométrica de razón 2. 
Los tamaños de entrada empleados en el estudio son: 4000, 8000, 16000, 
32000, 64000 y 128000, 256000 elementos respectivamente.

---------------------
Tablas de Resultados
---------------------


A continuación se mostrarán una serie de tablas con los resultados obtenidos
en nuestro estudio para la ejecución del algoritmo, en dichas tablas se
mostrará la siguiente información: El tamaño del array empleado (n), el tiempo 
medio de ejecución (t(n)), la cota subestimada, ajustada y sobreestimada. 

También es importante destacar que para el correcto estudio de dichas 
funciones se ha decidido que para aquellas mediciones de menos de 500 µs se 
ha decidido realizar 1000 iteraciones y calculado su promedio.

-------Creación de un montículo-------

Tiempos de ejecución (crear, aleatorio)

         Tamaño           t(n)   (t(n)/n^0.8)     (t(n)/n^1)   (t(n)/n^1.2)
(*)        4000         60.933       0.080021       0.015233       0.002900
(*)        8000        121.548       0.091680       0.015194       0.002518
(*)       16000        235.311       0.101940       0.014707       0.002122
(*)       32000        469.188       0.116742       0.014662       0.001841
          64000        959.000       0.137049       0.014984       0.001638
         128000       1940.000       0.159233       0.015156       0.001443
         256000       4002.000       0.188662       0.015633       0.001295

(*) -> Tiempo medio para 1000 iteraciones

Cota subestimada: n^0.8
Cota ajustada: n^1.0
Cota sobrestimada: n^1.2


Los valores de dividir el tiempo entre la cota subestimada tienden 
a infinito a medida que aumenta n.

Los valores de dividir el tiempo entre la cota ajustada tienden a 
la constante '0.015'.

Los valores de dividir el tiempo entre la cota sobrestimada tienden a 0 
a medida que aumenta n.



-------Ordenación por montículos-------

Tiempos de ejecución (monticulo, aleatorio)

         Tamaño           t(n)   (t(n)/n^0.9)   (t(n)/n^1.1)   (t(n)/n^1.3)
(*)        4000        435.811       0.249715       0.047537       0.009049
           8000        969.000       0.297538       0.049309       0.008172
          16000       1974.000       0.324817       0.046861       0.006761
          32000       4316.000       0.380580       0.047799       0.006003
          64000       9566.000       0.452031       0.049423       0.005404
         128000      20713.000       0.524510       0.049924       0.004752
         256000      43972.000       0.596706       0.049444       0.004097

(*) -> Tiempo medio para 1000 iteraciones 


Cota subestimada: n^0.9
Cota ajustada: n^1.1
Cota sobrestimada: n^1.3


Los valores de dividir el tiempo entre la cota subestimada tienden 
a infinito a medida que aumenta n.

Los valores de dividir el tiempo entre la cota ajustada tienden a 
la constante '0.049'.

Los valores de dividir el tiempo entre la cota sobrestimada tienden a 0 
a medida que aumenta n.


Tiempos de ejecución (monticulo, descendente)

         Tamaño           t(n)  (t(n)/n^0.88)  (t(n)/n^1.08)  (t(n)/n^1.28)
(*)        4000        378.826       0.256228       0.048777       0.009285
           8000        796.000       0.292546       0.048481       0.008034
          16000       1672.000       0.333895       0.048171       0.006950
          32000       3514.000       0.381302       0.047889       0.006015
          64000       7403.000       0.436485       0.047724       0.005218
         128000      15616.000       0.500293       0.047619       0.004533
         256000      32623.000       0.567901       0.047057       0.003899

(*) -> Tiempo medio para 1000 iteraciones 


Cota subestimada: n^0.88
Cota ajustada: n^1.08
Cota sobrestimada: n^1.28


Los valores de dividir el tiempo entre la cota subestimada tienden 
a infinito a medida que aumenta n.

Los valores de dividir el tiempo entre la cota ajustada tienden a 
la constante '0.047'.

Los valores de dividir el tiempo entre la cota sobrestimada tienden a 0 
a medida que aumenta n.



Tiempos de ejecución (monticulo, ascendente)

         Tamaño           t(n)  (t(n)/n^0.88)  (t(n)/n^1.08)  (t(n)/n^1.28)
(*)        4000        366.250       0.247722       0.047158       0.008977
           8000        778.000       0.285930       0.047385       0.007853
          16000       1637.000       0.326906       0.047163       0.006804
          32000       3454.000       0.374792       0.047072       0.005912
          64000       7308.000       0.430884       0.047111       0.005151
         128000      15418.000       0.493950       0.047015       0.004475
         256000      32081.000       0.558466       0.046275       0.003834

(*) -> Tiempo medio para 1000 iteraciones 


Cota subestimada: n^0.88
Cota ajustada: n^1.08
Cota sobrestimada: n^1.28


Los valores de dividir el tiempo entre el la cota subestimada tienden 
a infinito a medida que aumenta n.

Los valores de dividir el tiempo entre el la cota ajustada tienden a 
la constante '0.0465'.

Los valores de dividir el tiempo entre el la cota sobrestimada tienden a 0 
a medida que aumenta n.


--------------
Conclusiones
--------------

En esta práctica, hemos estudiado el algoritmo de ordenación por montículos
y su rendimiento en diferentes escenarios. Hemos observado que el algoritmo
se comporta de manera eficiente en la mayoría de los casos, y su complejidad
computacional se ajusta a las cotas propuestas, siendo de O(n*log(n)). Sin
embargo, hemos notado que el rendimiento del algoritmo es especialmente 
destacable cuando se aplica a conjuntos de datos más grandes. A medida que 
aumenta el tamaño del vector de entrada, el tiempo de ejecución tiende a 
aumentar, pero sigue siendo razonablemente rápido.

En el caso de conjuntos de datos aleatorios, hemos observado que el tiempo de 
ejecución es mayor en comparación con los conjuntos ordenados ascendentemente
o descendentemente, aunque es una diferencia bastante pequeña, sobre todo en 
comparación con los otros algoritmos vistos. Esto sugiere que el algoritmo de 
ordenación por montículos puede beneficiarse de datos preordenados. En general, 
hemos visto que las cotas subestimadas, ajustadas y sobrestimadas proporcionan 
una buena estimación del comportamiento del algoritmo en diferentes 
situaciones.
